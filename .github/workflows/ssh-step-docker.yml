# This is a basic workflow to help you get started with Actions

name: ssh-step-docker

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  # pull_request:
  #   branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# env:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  compile:
    name: Compile site assets
    runs-on: ubuntu-latest
    steps:
    - name: Checkout the repo
      uses: actions/checkout@v4.1.1

    # - name: Set up Python
    #   uses: actions/setup-python@v5.0.0
    #   with:
    #     python-version: "3.10"

    # - name: Install dependencies
    #   run: |
    #     pip install paramiko==3.4

    - name: Install smallstep
      run: |
        wget https://dl.smallstep.com/cli/docs-cli-install/latest/step-cli_amd64.deb
        sudo dpkg -i step-cli_amd64.deb
        which step

    # - name: Setup client
    #   run: |
    #     mkdir -p ~/.ssh
    #     echo "@cert-authority * ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBJJM+jkIdieQvdPb8DwnfnJudEc9PgVBqLDWHKgvqoIiMXhuIyGstQ9ULOBMdJkqxMjkRTFZp1iFvIk+iU6hwTA=" >> ~/.ssh/known_hosts

    - name: Build Docker
      run: |
        docker build -t step-ca  --no-cache --progress=plain . 2>&1 | tee build.log
        docker network create --subnet=172.18.0.0/16 mynet123

    - name: Startup step ca
      run: |
        docker run --hostname testhost --net mynet123 --ip 172.18.0.22 -p 2222:22 step-ca 1> docker.out 2> docker.err &
        sleep 10
        echo password > password.txt
        sudo echo "172.18.0.22 stepca" | sudo tee -a /etc/hosts
        # export HOSTALIASES=~/.hosts
        # ping -c1 172.18.0.22
        # ping -c1 stepca
        # echo -e '\x1dclose\x0d' | telnet stepca 22
        # echo -e '\x1dclose\x0d' | telnet stepca 8443
        ls -ltr build.log
        cat build.log
        grep "Root fingerprint: " build.log || exit 1
        echo step ca bootstrap --fingerprint $(grep "Root fingerprint: " build.log | awk '{print $NF}') --ca-url=https://stepca:8443 
        step ca bootstrap --fingerprint --ca-url=https://stepca:8443 $(grep "Root fingerprint: " build.log | awk '{print $NF}')        step ssh login testuser --provisioner step-ca@example.com --password-file password.txt 
        ssh testuser@192.168.56.10 "echo 'I\'m in'"


    # - name: Test ssh with password
    #   run: |
    #     sudo apt-get install sshpass
    #     sshpass -p 'password' ssh -o StrictHostKeyChecking=no -p 3000 sshuser@localhost 'exit'
    #     echo $?
    #     # python test_paramiko.py localhost sshuser 3000 password True

    # - name: Setup key and copy to server
    #   run: |
    #     ssh-keygen -t ecdsa -b 256 -f /tmp/sshkey -q -N ""
    #     sshpass -p 'password' ssh-copy-id -i /tmp/sshkey -p 3000 sshuser@localhost
        
    # - name: Setup key and ssh-agent
    #   run: |
    #     eval $(ssh-agent)
    #     ssh-add /tmp/sshkey
    #     ssh -o StrictHostKeyChecking=no -p 3000 sshuser@localhost 'exit'
    #     # python test_paramiko.py localhost sshuser 3000 None True

    # - name: Docker kill
    #   run: |
    #     docker kill sshserver

    # https://github.com/jonashackt/vagrant-github-actions

    # - name: Upload image
    #   uses: ishworkh/container-image-artifact-upload@v1.0.0
    #   with:
    #     image: "sshserver:latest"

  # compile-win:
  #   name: Compile site assets
  #   runs-on: windows-latest
  #   steps:
  #   - name: Checkout the repo
  #     uses: actions/checkout@v2
  #   - name: Checkout the repo
  #     uses: actions/checkout@v2

    # - name: sshpass
    #   run: |
    #     choco install sshpass
    #     sshpass -p 'password' ssh -o StrictHostKeyChecking=no -p 3000 sshuser@localhost 'exit'
    #     echo $?

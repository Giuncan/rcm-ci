# This is a basic workflow to help you get started with Actions

name: dev-env

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.10.11"
  TURBOVNC_VERSION: "3.1"

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  python-env:
    # The type of runner that the job will run on
    runs-on: windows-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: Cache python
        uses: actions/cache@v3.3.3
        id: cache-python
        with:
          path: python
          key: python-${{ env.PYTHON_VERSION }}

      - name: Install python locally
        if: ${{ steps.cache-python.outputs.cache-hit != 'true' }}
        run: |
          git clone https://github.com/pyenv-win/pyenv-win.git .pyenv
          .\.pyenv\pyenv-win\bin\pyenv.bat install ${{ env.PYTHON_VERSION }}
          mv .pyenv\pyenv-win\versions\${{ env.PYTHON_VERSION }} python
          ls python
          python\python.exe --version

      - name: Cache venv
        uses: actions/cache@v3.3.3
        id: cache-venv
        with:
          path: venv
          key: venv-${{ env.PYTHON_VERSION }}

      - name: Install venv
        if: ${{ steps.cache-venv.outputs.cache-hit != 'true' }}
        run: |
          python\python.exe -m venv venv
          venv\Scripts\Activate.ps1
          pip install numpy

      - name: Create script to port python and venv into another machine
        run : |
         Write-Output @'
         $ci_path = [regex]::Escape("D:\a\RemoteConnectionManager\RCM")
         
         # Script name and directory
         $script_name = $MyInvocation.MyCommand.Name
         $script_dir = Split-Path ($MyInvocation.MyCommand.Path)
         
         # Replace ci_path in all exe shebangs and in venv/pyvenv.cfg
         Get-ChildItem -Path $script_dir -Exclude $script_name -Recurse `
         | Select-String -pattern $ci_path -List `
         | Select-Object Path `
         | Foreach-Object {
             Write-Output "Replacing '$($ci_path)' with '$($script_dir)' in '$($_.Path)' ..."
             ((Get-Content -path $_.Path -Raw) -replace $ci_path, $script_dir ) `
             | Set-Content -Path $_.Path
         }
         '@ | Out-File -FilePath adapt-python-build-env.ps1

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: python-dev-env-${{ runner.os }}
          path: |
            python
            venv
            adapt-python-build-env.ps1
            !**/__pycache__/**

  externals:     
    runs-on: windows-latest
    steps:
      - name: Cache turbovnc
        uses: actions/cache@v3.3.3
        id: cache-turbovnc
        with:
          path: turbovnc
          key: -${{ env.TURBOVNC_VERSION }}

      - name: Install externals WINDOWS
        run: |        
         # Download exe
         curl -o turbovnc.exe $env:TURBOVNC_DOWNLOAD/${{ env.TURBOVNC_VERSION }}/TurboVNC-${{ env.TURBOVNC_VERSION }}-x64.exe
         
         # Extract file from exe
         choco install --no-progress innoextract
         innoextract turbovnc.exe
         
         # Create `external\turbovnc\bin` and copy all files there
         mv app turbovnc

      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.0.0
        with:
          name: external-${{ runner.os }}
          path: |
            turbovnc
